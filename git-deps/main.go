package main

import (
	"flag"
	"fmt"
	"github.com/ericaro/mrepo"
	"os"
)

var (
	makefile = flag.Bool("makefile", false, "Print dependencies in a Makefile format")
	help     = flag.Bool("h", false, "Print this help.")
)

func main() {
	flag.Parse()
	if *help {
		fmt.Printf(`USAGE %s [-options] <command> <args...>
			
DESCRIPTION:

  Manage git dependencies.
  Scan current directory, looking for embedded git repositories.

  Print dependencies: 
  		$git deps

  Export them to a Makefile dependency format.
  The result is printed to the stdout.


OPTIONS:
	
`, os.Args[0])
		flag.PrintDefaults()

		fmt.Println("\nEXAMPLE:\n")

		fmt.Printf("'git deps -makefile'\n", os.Args[0])
		os.Exit(-1)
	}

	// use wd by default
	wd, err := os.Getwd()
	if err != nil {
		fmt.Printf("Error, cannot determine the current directory. %s\n", err.Error())
	}

	scanner := mrepo.NewScan(wd)
	go func() {

		err = scanner.Find()
		if err != nil {
			fmt.Printf("Error scanning current directory (%s). %s", wd, err.Error())
		}
	}()

	//get the repository chan generated by Find call.
	repositories := scanner.Repositories()
	var d mrepo.Depender
	switch {
	case *makefile:
		d = mrepo.Makedeps
	default:
		d = mrepo.Deps
	}
	mrepo.Dependencies(repositories, wd, d)

}
